Q: What is Open CV?
Ans: OpenCV (Open Source Computer Vision Library) is a powerful and widely-used library for computer vision and image processing tasks. It provides tools and functions to perform a variaty of task such as. 
1: Image and Video Processing (Reading, Writing, and displying images and videos)

Q: what is PyTorch?
    Opensource ML library, developed by Facebook AI Researcher lab. Its used for developing and training deep learning models. 

Q: Transformers?
Ans:  Transformers are a type of deep learning model architecture that have revolutionized NLP, computer vision and audio processing. They are desgined to handle sequantial data. High effective for tasks like language translation, text generation, and more. the key innovation of transformers is the self-attention maechansim, which allow the model to weigh the importance of different words in a sentence, regardless of their position. 


////////////////////////////////////////////////////////////////////////////////////////////////


from transformers import BlipProcessor, BlipForConditionalGeneration
from PIL import Image
from transformers import BlipProcessor, BlipForConditionalGeneration
from PIL import Image, UnidentifiedImageError
import requests

# Load the processor and model
processor = BlipProcessor.from_pretrained("Salesforce/blip-image-captioning-base")
model = BlipForConditionalGeneration.from_pretrained("Salesforce/blip-image-captioning-base")

# Load an image from a URL
# Load an image from a URL
url = 'https://upload.wikimedia.org/wikipedia/commons/4/47/PNG_transparency_demonstration_1.png'  # Publicly available image URL

"""try:
    response = requests.get(url)
    response.raise_for_status()  # Check if the request was successful
    image = Image.open(BytesIO(response.content))
except requests.exceptions.RequestException as e:
    print(f"Error fetching image: {e}")
    exit()
except UnidentifiedImageError as e:
    print(f"Error identifying image: {e}")
    exit()"""
image_path="C:/Users/mf19-14/llama/apple.png"
try:
    image = Image.open(image_path)
except FileNotFoundError as e:
    print(f"Error: {e}")
    exit()
except UnidentifiedImageError as e:
    print(f"Error identifying image: {e}")
    exit()

# Process the image and generate a caption
inputs = processor(images=image, return_tensors="pt")
out = model.generate(**inputs)
caption = processor.decode(out[0], skip_special_tokens=True)

print("Generated Caption:", caption)


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import cv2
from PIL import Image
import pytesseract
# Path to the Tesseract executable
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'


im_file="C:/Users/mf19-14/llama/car with text.jpg"


#im=Image.open(im_file)
#or
img=cv2.imread(im_file) 
cv2.imshow("orgininal image",img)
cv2.waitKey(0)

#image rotations
#im.rotate(90).show()
#im.save("temp/apple.png")


# Inverted Images (black to white and white to black)
inverted_image=cv2.bitwise_not(img)
cv2.imwrite(im_file,inverted_image)
cv2.imshow("Inverted image",inverted_image)
cv2.waitKey(0)


#Rescaling



#Binarization

#convert gray scale
def grayscale(image):
    return cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)

gray_image=grayscale(img)
cv2.imwrite("temp/gray.jpg",gray_image)
gry=cv2.imread("temp/gray.jpg") 
cv2.imshow("gray scale Image ",gry)
cv2.waitKey(0)


#binary image
thresh, im_bw=cv2.threshold(gray_image,127,255,cv2.THRESH_BINARY)
cv2.imwrite("temp/b2_image.jpg",im_bw)
b=cv2.imread("temp/b2_image.jpg") 
cv2.imshow("binary image",b)
cv2.waitKey(0)


#remove noise 
def noise_removal(image):
    import numpy as np
    kernel=np.ones((1,1),np.uint8)
    image=cv2.dilate(image,kernel,iterations=1)
    kernel=np.ones((1,1),np.uint8)
    image=cv2.erode(image,kernel,iterations=1)
    image=cv2.morphologyEx(image,cv2.MORPH_CLOSE,kernel)
    image=cv2.medianBlur(image,3)
    return (image)

no_noise=noise_removal(im_bw)
cv2.imwrite("temp/no_noise.jpg",no_noise)
noNoise=cv2.imread("temp/no_noise.jpg") 
cv2.imshow("No Noise Image ",noNoise)
cv2.waitKey(0)



#dilation and Erosion
def thin_font(image):
    import numpy as np
    image=cv2.bitwise_not(image)
    kernel=np.ones((2,2),np.uint8)
    image=cv2.erode(image,kernel,iterations=2)
    image=cv2.bitwise_not(image)
    return (image)

eroded_image=thin_font(no_noise)
cv2.imwrite("temp/eroded_image.jpg",eroded_image)
noNoise=cv2.imread("temp/eroded_image.jpg") 
cv2.imshow("dilation and Erosion",noNoise)
cv2.waitKey(0)



#dilation
def thick_font(image):
    import numpy as np
    image=cv2.bitwise_not(image)
    kernel=np.ones((2,2),np.uint8)
    image=cv2.dilate(image,kernel,iterations=2)
    image=cv2.bitwise_not(image)
    return (image)

eroded_image=thick_font(no_noise)
cv2.imwrite("temp/dilated_image.jpg",eroded_image)
noNoise=cv2.imread("temp/dilated_image.jpg") 
cv2.imshow("Dilated: ",noNoise)
cv2.waitKey(0)


#Removing Borders
def remove_Borders(image):
  contours,heiarchy=cv2.findContours(image,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)
  cntSorted=sorted(contours,key=lambda x:cv2.contourArea(x))
  cnt=cntSorted[-1]
  x,y,w,h=cv2.boundingRect(cnt)
  crop=image[y:y+h,x:x+w]
  return (crop)

no_borders=remove_Borders(no_noise)
cv2.imwrite("temp/no_boarder.jpg",no_borders)
noBorder=cv2.imread("temp/no_boarder.jpg") 
cv2.imshow("Dilated: ",noBorder)
cv2.waitKey(0)

imag=Image.open(im_file)
ocr_result=pytesseract.image_to_string(imag)
print(ocr_result)
